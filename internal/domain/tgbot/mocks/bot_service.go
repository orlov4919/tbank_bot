// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	tgbot "linkTraccer/internal/domain/tgbot"

	mock "github.com/stretchr/testify/mock"
)

// BotService is an autogenerated mock type for the BotService type
type BotService struct {
	mock.Mock
}

type BotService_Expecter struct {
	mock *mock.Mock
}

func (_m *BotService) EXPECT() *BotService_Expecter {
	return &BotService_Expecter{mock: &_m.Mock}
}

// ChangeOffset provides a mock function with given fields: offset
func (_m *BotService) ChangeOffset(offset int) {
	_m.Called(offset)
}

// BotService_ChangeOffset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeOffset'
type BotService_ChangeOffset_Call struct {
	*mock.Call
}

// ChangeOffset is a helper method to define mock.On call
//   - offset int
func (_e *BotService_Expecter) ChangeOffset(offset interface{}) *BotService_ChangeOffset_Call {
	return &BotService_ChangeOffset_Call{Call: _e.mock.On("ChangeOffset", offset)}
}

func (_c *BotService_ChangeOffset_Call) Run(run func(offset int)) *BotService_ChangeOffset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *BotService_ChangeOffset_Call) Return() *BotService_ChangeOffset_Call {
	_c.Call.Return()
	return _c
}

func (_c *BotService_ChangeOffset_Call) RunAndReturn(run func(int)) *BotService_ChangeOffset_Call {
	_c.Run(run)
	return _c
}

// HandleUsersUpdates provides a mock function with no fields
func (_m *BotService) HandleUsersUpdates() ([]tgbot.Update, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HandleUsersUpdates")
	}

	var r0 []tgbot.Update
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]tgbot.Update, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []tgbot.Update); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tgbot.Update)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BotService_HandleUsersUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleUsersUpdates'
type BotService_HandleUsersUpdates_Call struct {
	*mock.Call
}

// HandleUsersUpdates is a helper method to define mock.On call
func (_e *BotService_Expecter) HandleUsersUpdates() *BotService_HandleUsersUpdates_Call {
	return &BotService_HandleUsersUpdates_Call{Call: _e.mock.On("HandleUsersUpdates")}
}

func (_c *BotService_HandleUsersUpdates_Call) Run(run func()) *BotService_HandleUsersUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BotService_HandleUsersUpdates_Call) Return(_a0 []tgbot.Update, _a1 error) *BotService_HandleUsersUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BotService_HandleUsersUpdates_Call) RunAndReturn(run func() ([]tgbot.Update, error)) *BotService_HandleUsersUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: userID, text
func (_m *BotService) SendMessage(userID int, text string) error {
	ret := _m.Called(userID, text)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(userID, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BotService_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type BotService_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - userID int
//   - text string
func (_e *BotService_Expecter) SendMessage(userID interface{}, text interface{}) *BotService_SendMessage_Call {
	return &BotService_SendMessage_Call{Call: _e.mock.On("SendMessage", userID, text)}
}

func (_c *BotService_SendMessage_Call) Run(run func(userID int, text string)) *BotService_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *BotService_SendMessage_Call) Return(_a0 error) *BotService_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BotService_SendMessage_Call) RunAndReturn(run func(int, string) error) *BotService_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewBotService creates a new instance of BotService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBotService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BotService {
	mock := &BotService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
