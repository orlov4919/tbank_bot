// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	tgbot "linkTraccer/internal/domain/tgbot"

	mock "github.com/stretchr/testify/mock"
)

// TgClient is an autogenerated mock type for the TgClient type
type TgClient struct {
	mock.Mock
}

type TgClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TgClient) EXPECT() *TgClient_Expecter {
	return &TgClient_Expecter{mock: &_m.Mock}
}

// HandleUsersUpdates provides a mock function with given fields: offset, limit
func (_m *TgClient) HandleUsersUpdates(offset int, limit int) ([]tgbot.Update, error) {
	ret := _m.Called(offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for HandleUsersUpdates")
	}

	var r0 []tgbot.Update
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]tgbot.Update, error)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []tgbot.Update); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tgbot.Update)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TgClient_HandleUsersUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleUsersUpdates'
type TgClient_HandleUsersUpdates_Call struct {
	*mock.Call
}

// HandleUsersUpdates is a helper method to define mock.On call
//   - offset int
//   - limit int
func (_e *TgClient_Expecter) HandleUsersUpdates(offset interface{}, limit interface{}) *TgClient_HandleUsersUpdates_Call {
	return &TgClient_HandleUsersUpdates_Call{Call: _e.mock.On("HandleUsersUpdates", offset, limit)}
}

func (_c *TgClient_HandleUsersUpdates_Call) Run(run func(offset int, limit int)) *TgClient_HandleUsersUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *TgClient_HandleUsersUpdates_Call) Return(_a0 []tgbot.Update, _a1 error) *TgClient_HandleUsersUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TgClient_HandleUsersUpdates_Call) RunAndReturn(run func(int, int) ([]tgbot.Update, error)) *TgClient_HandleUsersUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: userID, text
func (_m *TgClient) SendMessage(userID int, text string) error {
	ret := _m.Called(userID, text)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(userID, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TgClient_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type TgClient_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - userID int
//   - text string
func (_e *TgClient_Expecter) SendMessage(userID interface{}, text interface{}) *TgClient_SendMessage_Call {
	return &TgClient_SendMessage_Call{Call: _e.mock.On("SendMessage", userID, text)}
}

func (_c *TgClient_SendMessage_Call) Run(run func(userID int, text string)) *TgClient_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *TgClient_SendMessage_Call) Return(_a0 error) *TgClient_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TgClient_SendMessage_Call) RunAndReturn(run func(int, string) error) *TgClient_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewTgClient creates a new instance of TgClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTgClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TgClient {
	mock := &TgClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
