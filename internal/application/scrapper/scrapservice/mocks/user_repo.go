// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// AllLinks provides a mock function with no fields
func (_m *UserRepo) AllLinks() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LinksBatch")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// UserRepo_AllLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinksBatch'
type UserRepo_AllLinks_Call struct {
	*mock.Call
}

// AllLinks is a helper method to define mock.On call
func (_e *UserRepo_Expecter) AllLinks() *UserRepo_AllLinks_Call {
	return &UserRepo_AllLinks_Call{Call: _e.mock.On("LinksBatch")}
}

func (_c *UserRepo_AllLinks_Call) Run(run func()) *UserRepo_AllLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserRepo_AllLinks_Call) Return(_a0 []string) *UserRepo_AllLinks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_AllLinks_Call) RunAndReturn(run func() []string) *UserRepo_AllLinks_Call {
	_c.Call.Return(run)
	return _c
}

// AllUserLinks provides a mock function with given fields: user
func (_m *UserRepo) AllUserLinks(user int) ([]string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for AllUserLinks")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_AllUserLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllUserLinks'
type UserRepo_AllUserLinks_Call struct {
	*mock.Call
}

// AllUserLinks is a helper method to define mock.On call
//   - user int
func (_e *UserRepo_Expecter) AllUserLinks(user interface{}) *UserRepo_AllUserLinks_Call {
	return &UserRepo_AllUserLinks_Call{Call: _e.mock.On("AllUserLinks", user)}
}

func (_c *UserRepo_AllUserLinks_Call) Run(run func(user int)) *UserRepo_AllUserLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *UserRepo_AllUserLinks_Call) Return(_a0 []string, _a1 error) *UserRepo_AllUserLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_AllUserLinks_Call) RunAndReturn(run func(int) ([]string, error)) *UserRepo_AllUserLinks_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeLinkState provides a mock function with given fields: link, newState
func (_m *UserRepo) ChangeLinkLastCheck(link string, newState string) error {
	ret := _m.Called(link, newState)

	if len(ret) == 0 {
		panic("no return value specified for ChangeLinkLastCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(link, newState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_ChangeLinkState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeLinkLastCheck'
type UserRepo_ChangeLinkState_Call struct {
	*mock.Call
}

// ChangeLinkState is a helper method to define mock.On call
//   - link string
//   - newState string
func (_e *UserRepo_Expecter) ChangeLinkState(link interface{}, newState interface{}) *UserRepo_ChangeLinkState_Call {
	return &UserRepo_ChangeLinkState_Call{Call: _e.mock.On("ChangeLinkLastCheck", link, newState)}
}

func (_c *UserRepo_ChangeLinkState_Call) Run(run func(link string, newState string)) *UserRepo_ChangeLinkState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_ChangeLinkState_Call) Return(_a0 error) *UserRepo_ChangeLinkState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_ChangeLinkState_Call) RunAndReturn(run func(string, string) error) *UserRepo_ChangeLinkState_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: userID
func (_m *UserRepo) DeleteUser(userID int) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserRepo_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - userID int
func (_e *UserRepo_Expecter) DeleteUser(userID interface{}) *UserRepo_DeleteUser_Call {
	return &UserRepo_DeleteUser_Call{Call: _e.mock.On("DeleteUser", userID)}
}

func (_c *UserRepo_DeleteUser_Call) Run(run func(userID int)) *UserRepo_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *UserRepo_DeleteUser_Call) Return(_a0 error) *UserRepo_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_DeleteUser_Call) RunAndReturn(run func(int) error) *UserRepo_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// LinkState provides a mock function with given fields: link
func (_m *UserRepo) LinkLastCheck(link string) (string, error) {
	ret := _m.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for LinkUpdates")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(link)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(link)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_LinkState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkUpdates'
type UserRepo_LinkState_Call struct {
	*mock.Call
}

// LinkState is a helper method to define mock.On call
//   - link string
func (_e *UserRepo_Expecter) LinkState(link interface{}) *UserRepo_LinkState_Call {
	return &UserRepo_LinkState_Call{Call: _e.mock.On("LinkUpdates", link)}
}

func (_c *UserRepo_LinkState_Call) Run(run func(link string)) *UserRepo_LinkState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserRepo_LinkState_Call) Return(_a0 string, _a1 error) *UserRepo_LinkState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_LinkState_Call) RunAndReturn(run func(string) (string, error)) *UserRepo_LinkState_Call {
	_c.Call.Return(run)
	return _c
}

// RegUser provides a mock function with given fields: userID
func (_m *UserRepo) RegUser(userID int) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for RegUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_RegUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegUser'
type UserRepo_RegUser_Call struct {
	*mock.Call
}

// RegUser is a helper method to define mock.On call
//   - userID int
func (_e *UserRepo_Expecter) RegUser(userID interface{}) *UserRepo_RegUser_Call {
	return &UserRepo_RegUser_Call{Call: _e.mock.On("RegUser", userID)}
}

func (_c *UserRepo_RegUser_Call) Run(run func(userID int)) *UserRepo_RegUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *UserRepo_RegUser_Call) Return(_a0 error) *UserRepo_RegUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_RegUser_Call) RunAndReturn(run func(int) error) *UserRepo_RegUser_Call {
	_c.Call.Return(run)
	return _c
}

// TrackLink provides a mock function with given fields: userID, userLink, initialState
func (_m *UserRepo) TrackLink(userID int, userLink string, initialState string) error {
	ret := _m.Called(userID, userLink, initialState)

	if len(ret) == 0 {
		panic("no return value specified for TrackLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(userID, userLink, initialState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_TrackLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrackLink'
type UserRepo_TrackLink_Call struct {
	*mock.Call
}

// TrackLink is a helper method to define mock.On call
//   - userID int
//   - userLink string
//   - initialState string
func (_e *UserRepo_Expecter) TrackLink(userID interface{}, userLink interface{}, initialState interface{}) *UserRepo_TrackLink_Call {
	return &UserRepo_TrackLink_Call{Call: _e.mock.On("TrackLink", userID, userLink, initialState)}
}

func (_c *UserRepo_TrackLink_Call) Run(run func(userID int, userLink string, initialState string)) *UserRepo_TrackLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserRepo_TrackLink_Call) Return(_a0 error) *UserRepo_TrackLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_TrackLink_Call) RunAndReturn(run func(int, string, string) error) *UserRepo_TrackLink_Call {
	_c.Call.Return(run)
	return _c
}

// UntrackLink provides a mock function with given fields: user, link
func (_m *UserRepo) UntrackLink(user int, link string) error {
	ret := _m.Called(user, link)

	if len(ret) == 0 {
		panic("no return value specified for UntrackLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(user, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_UntrackLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntrackLink'
type UserRepo_UntrackLink_Call struct {
	*mock.Call
}

// UntrackLink is a helper method to define mock.On call
//   - user int
//   - link string
func (_e *UserRepo_Expecter) UntrackLink(user interface{}, link interface{}) *UserRepo_UntrackLink_Call {
	return &UserRepo_UntrackLink_Call{Call: _e.mock.On("UntrackLink", user, link)}
}

func (_c *UserRepo_UntrackLink_Call) Run(run func(user int, link string)) *UserRepo_UntrackLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_UntrackLink_Call) Return(_a0 error) *UserRepo_UntrackLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_UntrackLink_Call) RunAndReturn(run func(int, string) error) *UserRepo_UntrackLink_Call {
	_c.Call.Return(run)
	return _c
}

// UserExist provides a mock function with given fields: userID
func (_m *UserRepo) UserExist(userID int) bool {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for UserExist")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UserRepo_UserExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserExist'
type UserRepo_UserExist_Call struct {
	*mock.Call
}

// UserExist is a helper method to define mock.On call
//   - userID int
func (_e *UserRepo_Expecter) UserExist(userID interface{}) *UserRepo_UserExist_Call {
	return &UserRepo_UserExist_Call{Call: _e.mock.On("UserExist", userID)}
}

func (_c *UserRepo_UserExist_Call) Run(run func(userID int)) *UserRepo_UserExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *UserRepo_UserExist_Call) Return(_a0 bool) *UserRepo_UserExist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_UserExist_Call) RunAndReturn(run func(int) bool) *UserRepo_UserExist_Call {
	_c.Call.Return(run)
	return _c
}

// UserTrackLink provides a mock function with given fields: user, link
func (_m *UserRepo) UserTrackLink(user int, link string) bool {
	ret := _m.Called(user, link)

	if len(ret) == 0 {
		panic("no return value specified for UserTrackLink")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, string) bool); ok {
		r0 = rf(user, link)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UserRepo_UserTrackLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserTrackLink'
type UserRepo_UserTrackLink_Call struct {
	*mock.Call
}

// UserTrackLink is a helper method to define mock.On call
//   - user int
//   - link string
func (_e *UserRepo_Expecter) UserTrackLink(user interface{}, link interface{}) *UserRepo_UserTrackLink_Call {
	return &UserRepo_UserTrackLink_Call{Call: _e.mock.On("UserTrackLink", user, link)}
}

func (_c *UserRepo_UserTrackLink_Call) Run(run func(user int, link string)) *UserRepo_UserTrackLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_UserTrackLink_Call) Return(_a0 bool) *UserRepo_UserTrackLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_UserTrackLink_Call) RunAndReturn(run func(int, string) bool) *UserRepo_UserTrackLink_Call {
	_c.Call.Return(run)
	return _c
}

// UsersWhoTrackLink provides a mock function with given fields: userLink
func (_m *UserRepo) UsersWhoTrackLink(userLink string) []int {
	ret := _m.Called(userLink)

	if len(ret) == 0 {
		panic("no return value specified for UsersWhoTrackLink")
	}

	var r0 []int
	if rf, ok := ret.Get(0).(func(string) []int); ok {
		r0 = rf(userLink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

// UserRepo_UsersWhoTrackLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UsersWhoTrackLink'
type UserRepo_UsersWhoTrackLink_Call struct {
	*mock.Call
}

// UsersWhoTrackLink is a helper method to define mock.On call
//   - userLink string
func (_e *UserRepo_Expecter) UsersWhoTrackLink(userLink interface{}) *UserRepo_UsersWhoTrackLink_Call {
	return &UserRepo_UsersWhoTrackLink_Call{Call: _e.mock.On("UsersWhoTrackLink", userLink)}
}

func (_c *UserRepo_UsersWhoTrackLink_Call) Run(run func(userLink string)) *UserRepo_UsersWhoTrackLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserRepo_UsersWhoTrackLink_Call) Return(_a0 []int) *UserRepo_UsersWhoTrackLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_UsersWhoTrackLink_Call) RunAndReturn(run func(string) []int) *UserRepo_UsersWhoTrackLink_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
