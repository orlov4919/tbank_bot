// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SiteClient is an autogenerated mock type for the SiteClient type
type SiteClient struct {
	mock.Mock
}

type SiteClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SiteClient) EXPECT() *SiteClient_Expecter {
	return &SiteClient_Expecter{mock: &_m.Mock}
}

// CanTrack provides a mock function with given fields: link
func (_m *SiteClient) CanTrack(link string) bool {
	ret := _m.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for CanTrack")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(link)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SiteClient_CanTrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanTrack'
type SiteClient_CanTrack_Call struct {
	*mock.Call
}

// CanTrack is a helper method to define mock.On call
//   - link string
func (_e *SiteClient_Expecter) CanTrack(link interface{}) *SiteClient_CanTrack_Call {
	return &SiteClient_CanTrack_Call{Call: _e.mock.On("CanTrack", link)}
}

func (_c *SiteClient_CanTrack_Call) Run(run func(link string)) *SiteClient_CanTrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SiteClient_CanTrack_Call) Return(_a0 bool) *SiteClient_CanTrack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SiteClient_CanTrack_Call) RunAndReturn(run func(string) bool) *SiteClient_CanTrack_Call {
	_c.Call.Return(run)
	return _c
}

// LinkLastCheck provides a mock function with given fields: link
func (_m *SiteClient) LinkUpdates(link string) (string, error) {
	ret := _m.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for LinkUpdates")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(link)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(link)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SiteClient_LinkState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkUpdates'
type SiteClient_LinkState_Call struct {
	*mock.Call
}

// LinkState is a helper method to define mock.On call
//   - link string
func (_e *SiteClient_Expecter) LinkState(link interface{}) *SiteClient_LinkState_Call {
	return &SiteClient_LinkState_Call{Call: _e.mock.On("LinkUpdates", link)}
}

func (_c *SiteClient_LinkState_Call) Run(run func(link string)) *SiteClient_LinkState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SiteClient_LinkState_Call) Return(_a0 string, _a1 error) *SiteClient_LinkState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SiteClient_LinkState_Call) RunAndReturn(run func(string) (string, error)) *SiteClient_LinkState_Call {
	_c.Call.Return(run)
	return _c
}

// NewSiteClient creates a new instance of SiteClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSiteClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SiteClient {
	mock := &SiteClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
