// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	dto "linkTraccer/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// BotClient is an autogenerated mock type for the BotClient type
type BotClient struct {
	mock.Mock
}

type BotClient_Expecter struct {
	mock *mock.Mock
}

func (_m *BotClient) EXPECT() *BotClient_Expecter {
	return &BotClient_Expecter{mock: &_m.Mock}
}

// SendLinkUpdates provides a mock function with given fields: update
func (_m *BotClient) SendLinkUpdates(update *dto.LinkUpdate) error {
	ret := _m.Called(update)

	if len(ret) == 0 {
		panic("no return value specified for SendLinkUpdates")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.LinkUpdate) error); ok {
		r0 = rf(update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BotClient_SendLinkUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendLinkUpdates'
type BotClient_SendLinkUpdates_Call struct {
	*mock.Call
}

// SendLinkUpdates is a helper method to define mock.On call
//   - update *dto.LinkUpdate
func (_e *BotClient_Expecter) SendLinkUpdates(update interface{}) *BotClient_SendLinkUpdates_Call {
	return &BotClient_SendLinkUpdates_Call{Call: _e.mock.On("SendLinkUpdates", update)}
}

func (_c *BotClient_SendLinkUpdates_Call) Run(run func(update *dto.LinkUpdate)) *BotClient_SendLinkUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.LinkUpdate))
	})
	return _c
}

func (_c *BotClient_SendLinkUpdates_Call) Return(_a0 error) *BotClient_SendLinkUpdates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BotClient_SendLinkUpdates_Call) RunAndReturn(run func(*dto.LinkUpdate) error) *BotClient_SendLinkUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// NewBotClient creates a new instance of BotClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBotClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *BotClient {
	mock := &BotClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
