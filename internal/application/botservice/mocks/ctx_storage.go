// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	tgbot "linkTraccer/internal/domain/tgbot"

	mock "github.com/stretchr/testify/mock"
)

// CtxStorage is an autogenerated mock type for the CtxStorage type
type CtxStorage struct {
	mock.Mock
}

type CtxStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *CtxStorage) EXPECT() *CtxStorage_Expecter {
	return &CtxStorage_Expecter{mock: &_m.Mock}
}

// AddFilters provides a mock function with given fields: id, filters
func (_m *CtxStorage) AddFilters(id int, filters []string) error {
	ret := _m.Called(id, filters)

	if len(ret) == 0 {
		panic("no return value specified for AddFilters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []string) error); ok {
		r0 = rf(id, filters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CtxStorage_AddFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFilters'
type CtxStorage_AddFilters_Call struct {
	*mock.Call
}

// AddFilters is a helper method to define mock.On call
//   - id int
//   - filters []string
func (_e *CtxStorage_Expecter) AddFilters(id interface{}, filters interface{}) *CtxStorage_AddFilters_Call {
	return &CtxStorage_AddFilters_Call{Call: _e.mock.On("AddFilters", id, filters)}
}

func (_c *CtxStorage_AddFilters_Call) Run(run func(id int, filters []string)) *CtxStorage_AddFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]string))
	})
	return _c
}

func (_c *CtxStorage_AddFilters_Call) Return(_a0 error) *CtxStorage_AddFilters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CtxStorage_AddFilters_Call) RunAndReturn(run func(int, []string) error) *CtxStorage_AddFilters_Call {
	_c.Call.Return(run)
	return _c
}

// AddTags provides a mock function with given fields: id, tags
func (_m *CtxStorage) AddTags(id int, tags []string) error {
	ret := _m.Called(id, tags)

	if len(ret) == 0 {
		panic("no return value specified for AddTags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []string) error); ok {
		r0 = rf(id, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CtxStorage_AddTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTags'
type CtxStorage_AddTags_Call struct {
	*mock.Call
}

// AddTags is a helper method to define mock.On call
//   - id int
//   - tags []string
func (_e *CtxStorage_Expecter) AddTags(id interface{}, tags interface{}) *CtxStorage_AddTags_Call {
	return &CtxStorage_AddTags_Call{Call: _e.mock.On("AddTags", id, tags)}
}

func (_c *CtxStorage_AddTags_Call) Run(run func(id int, tags []string)) *CtxStorage_AddTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]string))
	})
	return _c
}

func (_c *CtxStorage_AddTags_Call) Return(_a0 error) *CtxStorage_AddTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CtxStorage_AddTags_Call) RunAndReturn(run func(int, []string) error) *CtxStorage_AddTags_Call {
	_c.Call.Return(run)
	return _c
}

// AddURL provides a mock function with given fields: id, url
func (_m *CtxStorage) AddURL(id int, url string) error {
	ret := _m.Called(id, url)

	if len(ret) == 0 {
		panic("no return value specified for AddURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(id, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CtxStorage_AddURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddURL'
type CtxStorage_AddURL_Call struct {
	*mock.Call
}

// AddURL is a helper method to define mock.On call
//   - id int
//   - url string
func (_e *CtxStorage_Expecter) AddURL(id interface{}, url interface{}) *CtxStorage_AddURL_Call {
	return &CtxStorage_AddURL_Call{Call: _e.mock.On("AddURL", id, url)}
}

func (_c *CtxStorage_AddURL_Call) Run(run func(id int, url string)) *CtxStorage_AddURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *CtxStorage_AddURL_Call) Return(_a0 error) *CtxStorage_AddURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CtxStorage_AddURL_Call) RunAndReturn(run func(int, string) error) *CtxStorage_AddURL_Call {
	_c.Call.Return(run)
	return _c
}

// RegUser provides a mock function with given fields: id
func (_m *CtxStorage) RegUser(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for RegUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CtxStorage_RegUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegUser'
type CtxStorage_RegUser_Call struct {
	*mock.Call
}

// RegUser is a helper method to define mock.On call
//   - id int
func (_e *CtxStorage_Expecter) RegUser(id interface{}) *CtxStorage_RegUser_Call {
	return &CtxStorage_RegUser_Call{Call: _e.mock.On("RegUser", id)}
}

func (_c *CtxStorage_RegUser_Call) Run(run func(id int)) *CtxStorage_RegUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *CtxStorage_RegUser_Call) Return(_a0 error) *CtxStorage_RegUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CtxStorage_RegUser_Call) RunAndReturn(run func(int) error) *CtxStorage_RegUser_Call {
	_c.Call.Return(run)
	return _c
}

// ResetCtx provides a mock function with given fields: id
func (_m *CtxStorage) ResetCtx(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ResetCtx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CtxStorage_ResetCtx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetCtx'
type CtxStorage_ResetCtx_Call struct {
	*mock.Call
}

// ResetCtx is a helper method to define mock.On call
//   - id int
func (_e *CtxStorage_Expecter) ResetCtx(id interface{}) *CtxStorage_ResetCtx_Call {
	return &CtxStorage_ResetCtx_Call{Call: _e.mock.On("ResetCtx", id)}
}

func (_c *CtxStorage_ResetCtx_Call) Run(run func(id int)) *CtxStorage_ResetCtx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *CtxStorage_ResetCtx_Call) Return(_a0 error) *CtxStorage_ResetCtx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CtxStorage_ResetCtx_Call) RunAndReturn(run func(int) error) *CtxStorage_ResetCtx_Call {
	_c.Call.Return(run)
	return _c
}

// UserContext provides a mock function with given fields: id
func (_m *CtxStorage) UserContext(id int) (*tgbot.ContextData, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for UserContext")
	}

	var r0 *tgbot.ContextData
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*tgbot.ContextData, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *tgbot.ContextData); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tgbot.ContextData)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CtxStorage_UserContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserContext'
type CtxStorage_UserContext_Call struct {
	*mock.Call
}

// UserContext is a helper method to define mock.On call
//   - id int
func (_e *CtxStorage_Expecter) UserContext(id interface{}) *CtxStorage_UserContext_Call {
	return &CtxStorage_UserContext_Call{Call: _e.mock.On("UserContext", id)}
}

func (_c *CtxStorage_UserContext_Call) Run(run func(id int)) *CtxStorage_UserContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *CtxStorage_UserContext_Call) Return(_a0 *tgbot.ContextData, _a1 error) *CtxStorage_UserContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CtxStorage_UserContext_Call) RunAndReturn(run func(int) (*tgbot.ContextData, error)) *CtxStorage_UserContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewCtxStorage creates a new instance of CtxStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCtxStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *CtxStorage {
	mock := &CtxStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
