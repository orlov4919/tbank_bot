// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CacheStorage is an autogenerated mock type for the CacheStorage type
type CacheStorage struct {
	mock.Mock
}

type CacheStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheStorage) EXPECT() *CacheStorage_Expecter {
	return &CacheStorage_Expecter{mock: &_m.Mock}
}

// GetUserLinks provides a mock function with given fields: id
func (_m *CacheStorage) GetUserLinks(id int64) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserLinks")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheStorage_GetUserLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserLinks'
type CacheStorage_GetUserLinks_Call struct {
	*mock.Call
}

// GetUserLinks is a helper method to define mock.On call
//   - id int64
func (_e *CacheStorage_Expecter) GetUserLinks(id interface{}) *CacheStorage_GetUserLinks_Call {
	return &CacheStorage_GetUserLinks_Call{Call: _e.mock.On("GetUserLinks", id)}
}

func (_c *CacheStorage_GetUserLinks_Call) Run(run func(id int64)) *CacheStorage_GetUserLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *CacheStorage_GetUserLinks_Call) Return(_a0 string, _a1 error) *CacheStorage_GetUserLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheStorage_GetUserLinks_Call) RunAndReturn(run func(int64) (string, error)) *CacheStorage_GetUserLinks_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateUserCache provides a mock function with given fields: id
func (_m *CacheStorage) InvalidateUserCache(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateUserCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheStorage_InvalidateUserCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateUserCache'
type CacheStorage_InvalidateUserCache_Call struct {
	*mock.Call
}

// InvalidateUserCache is a helper method to define mock.On call
//   - id int64
func (_e *CacheStorage_Expecter) InvalidateUserCache(id interface{}) *CacheStorage_InvalidateUserCache_Call {
	return &CacheStorage_InvalidateUserCache_Call{Call: _e.mock.On("InvalidateUserCache", id)}
}

func (_c *CacheStorage_InvalidateUserCache_Call) Run(run func(id int64)) *CacheStorage_InvalidateUserCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *CacheStorage_InvalidateUserCache_Call) Return(_a0 error) *CacheStorage_InvalidateUserCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheStorage_InvalidateUserCache_Call) RunAndReturn(run func(int64) error) *CacheStorage_InvalidateUserCache_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserLinks provides a mock function with given fields: id, links
func (_m *CacheStorage) SetUserLinks(id int64, links string) error {
	ret := _m.Called(id, links)

	if len(ret) == 0 {
		panic("no return value specified for SetUserLinks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(id, links)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheStorage_SetUserLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserLinks'
type CacheStorage_SetUserLinks_Call struct {
	*mock.Call
}

// SetUserLinks is a helper method to define mock.On call
//   - id int64
//   - links string
func (_e *CacheStorage_Expecter) SetUserLinks(id interface{}, links interface{}) *CacheStorage_SetUserLinks_Call {
	return &CacheStorage_SetUserLinks_Call{Call: _e.mock.On("SetUserLinks", id, links)}
}

func (_c *CacheStorage_SetUserLinks_Call) Run(run func(id int64, links string)) *CacheStorage_SetUserLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *CacheStorage_SetUserLinks_Call) Return(_a0 error) *CacheStorage_SetUserLinks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheStorage_SetUserLinks_Call) RunAndReturn(run func(int64, string) error) *CacheStorage_SetUserLinks_Call {
	_c.Call.Return(run)
	return _c
}

// NewCacheStorage creates a new instance of CacheStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheStorage {
	mock := &CacheStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
