// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	tgbot "linkTraccer/internal/domain/tgbot"

	mock "github.com/stretchr/testify/mock"
)

// ScrapClient is an autogenerated mock type for the ScrapClient type
type ScrapClient struct {
	mock.Mock
}

type ScrapClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ScrapClient) EXPECT() *ScrapClient_Expecter {
	return &ScrapClient_Expecter{mock: &_m.Mock}
}

// AddLink provides a mock function with given fields: _a0, _a1
func (_m *ScrapClient) AddLink(_a0 int64, _a1 *tgbot.ContextData) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *tgbot.ContextData) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrapClient_AddLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLink'
type ScrapClient_AddLink_Call struct {
	*mock.Call
}

// AddLink is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 *tgbot.ContextData
func (_e *ScrapClient_Expecter) AddLink(_a0 interface{}, _a1 interface{}) *ScrapClient_AddLink_Call {
	return &ScrapClient_AddLink_Call{Call: _e.mock.On("AddLink", _a0, _a1)}
}

func (_c *ScrapClient_AddLink_Call) Run(run func(_a0 int64, _a1 *tgbot.ContextData)) *ScrapClient_AddLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*tgbot.ContextData))
	})
	return _c
}

func (_c *ScrapClient_AddLink_Call) Return(_a0 error) *ScrapClient_AddLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScrapClient_AddLink_Call) RunAndReturn(run func(int64, *tgbot.ContextData) error) *ScrapClient_AddLink_Call {
	_c.Call.Return(run)
	return _c
}

// RegUser provides a mock function with given fields: id
func (_m *ScrapClient) RegUser(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for RegUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrapClient_RegUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegUser'
type ScrapClient_RegUser_Call struct {
	*mock.Call
}

// RegUser is a helper method to define mock.On call
//   - id int64
func (_e *ScrapClient_Expecter) RegUser(id interface{}) *ScrapClient_RegUser_Call {
	return &ScrapClient_RegUser_Call{Call: _e.mock.On("RegUser", id)}
}

func (_c *ScrapClient_RegUser_Call) Run(run func(id int64)) *ScrapClient_RegUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ScrapClient_RegUser_Call) Return(_a0 error) *ScrapClient_RegUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScrapClient_RegUser_Call) RunAndReturn(run func(int64) error) *ScrapClient_RegUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveLink provides a mock function with given fields: _a0, _a1
func (_m *ScrapClient) RemoveLink(_a0 int64, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScrapClient_RemoveLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLink'
type ScrapClient_RemoveLink_Call struct {
	*mock.Call
}

// RemoveLink is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 string
func (_e *ScrapClient_Expecter) RemoveLink(_a0 interface{}, _a1 interface{}) *ScrapClient_RemoveLink_Call {
	return &ScrapClient_RemoveLink_Call{Call: _e.mock.On("RemoveLink", _a0, _a1)}
}

func (_c *ScrapClient_RemoveLink_Call) Run(run func(_a0 int64, _a1 string)) *ScrapClient_RemoveLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *ScrapClient_RemoveLink_Call) Return(_a0 error) *ScrapClient_RemoveLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScrapClient_RemoveLink_Call) RunAndReturn(run func(int64, string) error) *ScrapClient_RemoveLink_Call {
	_c.Call.Return(run)
	return _c
}

// UserLinks provides a mock function with given fields: _a0
func (_m *ScrapClient) UserLinks(_a0 int64) ([]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UserLinks")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int64) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScrapClient_UserLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserLinks'
type ScrapClient_UserLinks_Call struct {
	*mock.Call
}

// UserLinks is a helper method to define mock.On call
//   - _a0 int64
func (_e *ScrapClient_Expecter) UserLinks(_a0 interface{}) *ScrapClient_UserLinks_Call {
	return &ScrapClient_UserLinks_Call{Call: _e.mock.On("UserLinks", _a0)}
}

func (_c *ScrapClient_UserLinks_Call) Run(run func(_a0 int64)) *ScrapClient_UserLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ScrapClient_UserLinks_Call) Return(_a0 []string, _a1 error) *ScrapClient_UserLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ScrapClient_UserLinks_Call) RunAndReturn(run func(int64) ([]string, error)) *ScrapClient_UserLinks_Call {
	_c.Call.Return(run)
	return _c
}

// NewScrapClient creates a new instance of ScrapClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScrapClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScrapClient {
	mock := &ScrapClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
