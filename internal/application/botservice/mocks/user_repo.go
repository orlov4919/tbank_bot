// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"
	scrapservice "linkTraccer/internal/application/scrapper/scrapservice"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// AllUserLinks provides a mock function with given fields: userID
func (_m *UserRepo) AllUserLinks(userID int64) ([]string, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for AllUserLinks")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) []string); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_AllUserLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllUserLinks'
type UserRepo_AllUserLinks_Call struct {
	*mock.Call
}

// AllUserLinks is a helper method to define mock.On call
//   - userID int64
func (_e *UserRepo_Expecter) AllUserLinks(userID interface{}) *UserRepo_AllUserLinks_Call {
	return &UserRepo_AllUserLinks_Call{Call: _e.mock.On("AllUserLinks", userID)}
}

func (_c *UserRepo_AllUserLinks_Call) Run(run func(userID int64)) *UserRepo_AllUserLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *UserRepo_AllUserLinks_Call) Return(_a0 []string, _a1 error) *UserRepo_AllUserLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_AllUserLinks_Call) RunAndReturn(run func(int64) ([]string, error)) *UserRepo_AllUserLinks_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeLastCheckTime provides a mock function with given fields: link, checkTime
func (_m *UserRepo) ChangeLastCheckTime(link string, checkTime time.Time) error {
	ret := _m.Called(link, checkTime)

	if len(ret) == 0 {
		panic("no return value specified for ChangeLastCheckTime")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Time) error); ok {
		r0 = rf(link, checkTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_ChangeLastCheckTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeLastCheckTime'
type UserRepo_ChangeLastCheckTime_Call struct {
	*mock.Call
}

// ChangeLastCheckTime is a helper method to define mock.On call
//   - link string
//   - checkTime time.Time
func (_e *UserRepo_Expecter) ChangeLastCheckTime(link interface{}, checkTime interface{}) *UserRepo_ChangeLastCheckTime_Call {
	return &UserRepo_ChangeLastCheckTime_Call{Call: _e.mock.On("ChangeLastCheckTime", link, checkTime)}
}

func (_c *UserRepo_ChangeLastCheckTime_Call) Run(run func(link string, checkTime time.Time)) *UserRepo_ChangeLastCheckTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time))
	})
	return _c
}

func (_c *UserRepo_ChangeLastCheckTime_Call) Return(_a0 error) *UserRepo_ChangeLastCheckTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_ChangeLastCheckTime_Call) RunAndReturn(run func(string, time.Time) error) *UserRepo_ChangeLastCheckTime_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, user
func (_m *UserRepo) DeleteUser(ctx context.Context, user int64) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserRepo_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user int64
func (_e *UserRepo_Expecter) DeleteUser(ctx interface{}, user interface{}) *UserRepo_DeleteUser_Call {
	return &UserRepo_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, user)}
}

func (_c *UserRepo_DeleteUser_Call) Run(run func(ctx context.Context, user int64)) *UserRepo_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserRepo_DeleteUser_Call) Return(_a0 error) *UserRepo_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_DeleteUser_Call) RunAndReturn(run func(context.Context, int64) error) *UserRepo_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewLinksPaginator provides a mock function with no fields
func (_m *UserRepo) NewLinksPaginator() scrapservice.LinkPaginator {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewLinksPaginator")
	}

	var r0 scrapservice.LinkPaginator
	if rf, ok := ret.Get(0).(func() scrapservice.LinkPaginator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scrapservice.LinkPaginator)
		}
	}

	return r0
}

// UserRepo_NewLinksPaginator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewLinksPaginator'
type UserRepo_NewLinksPaginator_Call struct {
	*mock.Call
}

// NewLinksPaginator is a helper method to define mock.On call
func (_e *UserRepo_Expecter) NewLinksPaginator() *UserRepo_NewLinksPaginator_Call {
	return &UserRepo_NewLinksPaginator_Call{Call: _e.mock.On("NewLinksPaginator")}
}

func (_c *UserRepo_NewLinksPaginator_Call) Run(run func()) *UserRepo_NewLinksPaginator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserRepo_NewLinksPaginator_Call) Return(_a0 scrapservice.LinkPaginator) *UserRepo_NewLinksPaginator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_NewLinksPaginator_Call) RunAndReturn(run func() scrapservice.LinkPaginator) *UserRepo_NewLinksPaginator_Call {
	_c.Call.Return(run)
	return _c
}

// RegUser provides a mock function with given fields: UserID
func (_m *UserRepo) RegUser(UserID int64) error {
	ret := _m.Called(UserID)

	if len(ret) == 0 {
		panic("no return value specified for RegUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(UserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_RegUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegUser'
type UserRepo_RegUser_Call struct {
	*mock.Call
}

// RegUser is a helper method to define mock.On call
//   - UserID int64
func (_e *UserRepo_Expecter) RegUser(UserID interface{}) *UserRepo_RegUser_Call {
	return &UserRepo_RegUser_Call{Call: _e.mock.On("RegUser", UserID)}
}

func (_c *UserRepo_RegUser_Call) Run(run func(UserID int64)) *UserRepo_RegUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *UserRepo_RegUser_Call) Return(_a0 error) *UserRepo_RegUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_RegUser_Call) RunAndReturn(run func(int64) error) *UserRepo_RegUser_Call {
	_c.Call.Return(run)
	return _c
}

// TrackLink provides a mock function with given fields: ctx, userID, link, update
func (_m *UserRepo) TrackLink(ctx context.Context, userID int64, link string, update time.Time) error {
	ret := _m.Called(ctx, userID, link, update)

	if len(ret) == 0 {
		panic("no return value specified for TrackLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, time.Time) error); ok {
		r0 = rf(ctx, userID, link, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_TrackLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrackLink'
type UserRepo_TrackLink_Call struct {
	*mock.Call
}

// TrackLink is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - link string
//   - update time.Time
func (_e *UserRepo_Expecter) TrackLink(ctx interface{}, userID interface{}, link interface{}, update interface{}) *UserRepo_TrackLink_Call {
	return &UserRepo_TrackLink_Call{Call: _e.mock.On("TrackLink", ctx, userID, link, update)}
}

func (_c *UserRepo_TrackLink_Call) Run(run func(ctx context.Context, userID int64, link string, update time.Time)) *UserRepo_TrackLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *UserRepo_TrackLink_Call) Return(_a0 error) *UserRepo_TrackLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_TrackLink_Call) RunAndReturn(run func(context.Context, int64, string, time.Time) error) *UserRepo_TrackLink_Call {
	_c.Call.Return(run)
	return _c
}

// UntrackLink provides a mock function with given fields: user, link
func (_m *UserRepo) UntrackLink(user int64, link string) error {
	ret := _m.Called(user, link)

	if len(ret) == 0 {
		panic("no return value specified for UntrackLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(user, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_UntrackLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntrackLink'
type UserRepo_UntrackLink_Call struct {
	*mock.Call
}

// UntrackLink is a helper method to define mock.On call
//   - user int64
//   - link string
func (_e *UserRepo_Expecter) UntrackLink(user interface{}, link interface{}) *UserRepo_UntrackLink_Call {
	return &UserRepo_UntrackLink_Call{Call: _e.mock.On("UntrackLink", user, link)}
}

func (_c *UserRepo_UntrackLink_Call) Run(run func(user int64, link string)) *UserRepo_UntrackLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_UntrackLink_Call) Return(_a0 error) *UserRepo_UntrackLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_UntrackLink_Call) RunAndReturn(run func(int64, string) error) *UserRepo_UntrackLink_Call {
	_c.Call.Return(run)
	return _c
}

// UserExist provides a mock function with given fields: UserID
func (_m *UserRepo) UserExist(UserID int64) (bool, error) {
	ret := _m.Called(UserID)

	if len(ret) == 0 {
		panic("no return value specified for UserExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (bool, error)); ok {
		return rf(UserID)
	}
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(UserID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(UserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_UserExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserExist'
type UserRepo_UserExist_Call struct {
	*mock.Call
}

// UserExist is a helper method to define mock.On call
//   - UserID int64
func (_e *UserRepo_Expecter) UserExist(UserID interface{}) *UserRepo_UserExist_Call {
	return &UserRepo_UserExist_Call{Call: _e.mock.On("UserExist", UserID)}
}

func (_c *UserRepo_UserExist_Call) Run(run func(UserID int64)) *UserRepo_UserExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *UserRepo_UserExist_Call) Return(_a0 bool, _a1 error) *UserRepo_UserExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_UserExist_Call) RunAndReturn(run func(int64) (bool, error)) *UserRepo_UserExist_Call {
	_c.Call.Return(run)
	return _c
}

// UserTrackLink provides a mock function with given fields: userID, URL
func (_m *UserRepo) UserTrackLink(userID int64, URL string) (bool, error) {
	ret := _m.Called(userID, URL)

	if len(ret) == 0 {
		panic("no return value specified for UserTrackLink")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) (bool, error)); ok {
		return rf(userID, URL)
	}
	if rf, ok := ret.Get(0).(func(int64, string) bool); ok {
		r0 = rf(userID, URL)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(userID, URL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_UserTrackLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserTrackLink'
type UserRepo_UserTrackLink_Call struct {
	*mock.Call
}

// UserTrackLink is a helper method to define mock.On call
//   - userID int64
//   - URL string
func (_e *UserRepo_Expecter) UserTrackLink(userID interface{}, URL interface{}) *UserRepo_UserTrackLink_Call {
	return &UserRepo_UserTrackLink_Call{Call: _e.mock.On("UserTrackLink", userID, URL)}
}

func (_c *UserRepo_UserTrackLink_Call) Run(run func(userID int64, URL string)) *UserRepo_UserTrackLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_UserTrackLink_Call) Return(_a0 bool, _a1 error) *UserRepo_UserTrackLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_UserTrackLink_Call) RunAndReturn(run func(int64, string) (bool, error)) *UserRepo_UserTrackLink_Call {
	_c.Call.Return(run)
	return _c
}

// UsersWhoTrackLink provides a mock function with given fields: linkID
func (_m *UserRepo) UsersWhoTrackLink(linkID int64) ([]int64, error) {
	ret := _m.Called(linkID)

	if len(ret) == 0 {
		panic("no return value specified for UsersWhoTrackLink")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]int64, error)); ok {
		return rf(linkID)
	}
	if rf, ok := ret.Get(0).(func(int64) []int64); ok {
		r0 = rf(linkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(linkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_UsersWhoTrackLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UsersWhoTrackLink'
type UserRepo_UsersWhoTrackLink_Call struct {
	*mock.Call
}

// UsersWhoTrackLink is a helper method to define mock.On call
//   - linkID int64
func (_e *UserRepo_Expecter) UsersWhoTrackLink(linkID interface{}) *UserRepo_UsersWhoTrackLink_Call {
	return &UserRepo_UsersWhoTrackLink_Call{Call: _e.mock.On("UsersWhoTrackLink", linkID)}
}

func (_c *UserRepo_UsersWhoTrackLink_Call) Run(run func(linkID int64)) *UserRepo_UsersWhoTrackLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *UserRepo_UsersWhoTrackLink_Call) Return(_a0 []int64, _a1 error) *UserRepo_UsersWhoTrackLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_UsersWhoTrackLink_Call) RunAndReturn(run func(int64) ([]int64, error)) *UserRepo_UsersWhoTrackLink_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
